// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/osmi.proto

package osmi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OsmiService_CreateTicket_FullMethodName   = "/osmi.OsmiService/CreateTicket"
	OsmiService_ListTickets_FullMethodName    = "/osmi.OsmiService/ListTickets"
	OsmiService_CreateUser_FullMethodName     = "/osmi.OsmiService/CreateUser"
	OsmiService_CreateCustomer_FullMethodName = "/osmi.OsmiService/CreateCustomer"
	OsmiService_GetCustomer_FullMethodName    = "/osmi.OsmiService/GetCustomer"
	OsmiService_CreateEvent_FullMethodName    = "/osmi.OsmiService/CreateEvent"
	OsmiService_GetEvent_FullMethodName       = "/osmi.OsmiService/GetEvent"
	OsmiService_ListEvents_FullMethodName     = "/osmi.OsmiService/ListEvents"
)

// OsmiServiceClient is the client API for OsmiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OsmiServiceClient interface {
	CreateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	ListTickets(ctx context.Context, in *UserLookup, opts ...grpc.CallOption) (*TicketListResponse, error)
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
	GetCustomer(ctx context.Context, in *CustomerLookup, opts ...grpc.CallOption) (*CustomerResponse, error)
	CreateEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	GetEvent(ctx context.Context, in *EventLookup, opts ...grpc.CallOption) (*EventResponse, error)
	ListEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EventListResponse, error)
}

type osmiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOsmiServiceClient(cc grpc.ClientConnInterface) OsmiServiceClient {
	return &osmiServiceClient{cc}
}

func (c *osmiServiceClient) CreateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, OsmiService_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmiServiceClient) ListTickets(ctx context.Context, in *UserLookup, opts ...grpc.CallOption) (*TicketListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketListResponse)
	err := c.cc.Invoke(ctx, OsmiService_ListTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmiServiceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, OsmiService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmiServiceClient) CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, OsmiService_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmiServiceClient) GetCustomer(ctx context.Context, in *CustomerLookup, opts ...grpc.CallOption) (*CustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, OsmiService_GetCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmiServiceClient) CreateEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, OsmiService_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmiServiceClient) GetEvent(ctx context.Context, in *EventLookup, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, OsmiService_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmiServiceClient) ListEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EventListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventListResponse)
	err := c.cc.Invoke(ctx, OsmiService_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OsmiServiceServer is the server API for OsmiService service.
// All implementations must embed UnimplementedOsmiServiceServer
// for forward compatibility.
type OsmiServiceServer interface {
	CreateTicket(context.Context, *TicketRequest) (*TicketResponse, error)
	ListTickets(context.Context, *UserLookup) (*TicketListResponse, error)
	CreateUser(context.Context, *UserRequest) (*UserResponse, error)
	CreateCustomer(context.Context, *CustomerRequest) (*CustomerResponse, error)
	GetCustomer(context.Context, *CustomerLookup) (*CustomerResponse, error)
	CreateEvent(context.Context, *EventRequest) (*EventResponse, error)
	GetEvent(context.Context, *EventLookup) (*EventResponse, error)
	ListEvents(context.Context, *Empty) (*EventListResponse, error)
	mustEmbedUnimplementedOsmiServiceServer()
}

// UnimplementedOsmiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOsmiServiceServer struct{}

func (UnimplementedOsmiServiceServer) CreateTicket(context.Context, *TicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedOsmiServiceServer) ListTickets(context.Context, *UserLookup) (*TicketListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedOsmiServiceServer) CreateUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedOsmiServiceServer) CreateCustomer(context.Context, *CustomerRequest) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedOsmiServiceServer) GetCustomer(context.Context, *CustomerLookup) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedOsmiServiceServer) CreateEvent(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedOsmiServiceServer) GetEvent(context.Context, *EventLookup) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedOsmiServiceServer) ListEvents(context.Context, *Empty) (*EventListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedOsmiServiceServer) mustEmbedUnimplementedOsmiServiceServer() {}
func (UnimplementedOsmiServiceServer) testEmbeddedByValue()                     {}

// UnsafeOsmiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OsmiServiceServer will
// result in compilation errors.
type UnsafeOsmiServiceServer interface {
	mustEmbedUnimplementedOsmiServiceServer()
}

func RegisterOsmiServiceServer(s grpc.ServiceRegistrar, srv OsmiServiceServer) {
	// If the following call pancis, it indicates UnimplementedOsmiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OsmiService_ServiceDesc, srv)
}

func _OsmiService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).CreateTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsmiService_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_ListTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).ListTickets(ctx, req.(*UserLookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsmiService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsmiService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).CreateCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsmiService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).GetCustomer(ctx, req.(*CustomerLookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsmiService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).CreateEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsmiService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).GetEvent(ctx, req.(*EventLookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsmiService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmiServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OsmiService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmiServiceServer).ListEvents(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OsmiService_ServiceDesc is the grpc.ServiceDesc for OsmiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OsmiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "osmi.OsmiService",
	HandlerType: (*OsmiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _OsmiService_CreateTicket_Handler,
		},
		{
			MethodName: "ListTickets",
			Handler:    _OsmiService_ListTickets_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _OsmiService_CreateUser_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _OsmiService_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _OsmiService_GetCustomer_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _OsmiService_CreateEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _OsmiService_GetEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _OsmiService_ListEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/osmi.proto",
}
